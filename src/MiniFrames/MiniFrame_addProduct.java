package MiniFrames;

import default_package.DBConnection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;

/**
 *
 * @author Lenovo-x130
 */
public class MiniFrame_addProduct extends javax.swing.JFrame {

    String productName, product_B_Price, product_S_Price, perc_comm;
    int profit;
    double perc_profit;
    private JPopupMenu suggestionMenu;

    /**
     * Creates new form addProduct
     */
    public MiniFrame_addProduct() {
        initComponents();
        suggestionMenu = new JPopupMenu();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lbl_back = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txt_productName = new javax.swing.JTextField();
        btnSubmit = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txt_product_B_Price = new javax.swing.JTextField();
        btnDel = new javax.swing.JButton();
        txt_product_S_Price = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        lblMessage = new javax.swing.JLabel();
        txt_commission = new rojerusan.RSMetroTextPlaceHolder();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(142, 163, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 102, 51));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbl_back.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        lbl_back.setForeground(new java.awt.Color(255, 255, 255));
        lbl_back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/AddNewBookIcons/icons8_Rewind_48px.png"))); // NOI18N
        lbl_back.setText("Back");
        lbl_back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_backMouseClicked(evt);
            }
        });
        jPanel2.add(lbl_back, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 110, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 120, 50));

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jLabel1.setText("ADD NEW PRODUCT");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 0, 280, 50));

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel2.setText("Description of the Product: ");
        jLabel2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel2.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 250, 30));

        txt_productName.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        txt_productName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_productNameKeyReleased(evt);
            }
        });
        jPanel1.add(txt_productName, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 100, 290, 40));

        btnSubmit.setBackground(new java.awt.Color(153, 255, 153));
        btnSubmit.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        btnSubmit.setText("SUBMIT");
        btnSubmit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSubmitMouseClicked(evt);
            }
        });
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });
        jPanel1.add(btnSubmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 370, 120, 30));

        btnUpdate.setBackground(new java.awt.Color(255, 153, 51));
        btnUpdate.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        jPanel1.add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 370, 120, 30));

        jLabel3.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel3.setText("Buying Price of the Product: ");
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel3.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 260, 30));

        txt_product_B_Price.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        txt_product_B_Price.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_product_B_PriceKeyTyped(evt);
            }
        });
        jPanel1.add(txt_product_B_Price, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 150, 290, 40));

        btnDel.setBackground(new java.awt.Color(255, 51, 0));
        btnDel.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        btnDel.setText("DELETE");
        btnDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActionPerformed(evt);
            }
        });
        jPanel1.add(btnDel, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 370, 120, 30));

        txt_product_S_Price.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        txt_product_S_Price.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_product_S_PriceKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_product_S_PriceKeyTyped(evt);
            }
        });
        jPanel1.add(txt_product_S_Price, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 200, 290, 40));

        jLabel4.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel4.setText("Percentage Commission:");
        jLabel4.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel4.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 260, 30));

        lblMessage.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jPanel1.add(lblMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 310, 240, 30));

        txt_commission.setForeground(new java.awt.Color(0, 0, 0));
        txt_commission.setBorderColor(new java.awt.Color(204, 204, 204));
        txt_commission.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        txt_commission.setPlaceholder("%tage commission on the product");
        txt_commission.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_commissionKeyTyped(evt);
            }
        });
        jPanel1.add(txt_commission, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 250, 290, -1));

        jLabel5.setFont(new java.awt.Font("Verdana", 0, 18)); // NOI18N
        jLabel5.setText("Selling Price of the Product: ");
        jLabel5.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel5.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 260, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 420));

        setSize(new java.awt.Dimension(596, 417));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // On Key Typed show suggestions
    private void showSuggestions(String text) {
        ArrayList<String> suggestions = getSuggestions(text);

        if (suggestions.isEmpty()) {
            suggestionMenu.setVisible(false);
            return;
        }

        suggestionMenu.removeAll();
        for (String suggestion : suggestions) {
            JMenuItem item = new JMenuItem(suggestion);
            item.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    txt_productName.setText(suggestion);
                    suggestionMenu.setVisible(false);
                }
            });
            suggestionMenu.add(item);
        }

        suggestionMenu.show(txt_productName, 0, txt_productName.getHeight());
        suggestionMenu.setVisible(true);
    }

    private ArrayList<String> getSuggestions(String text) {
        ArrayList<String> suggestions = new ArrayList<>();
        try {
            Connection con = DBConnection.getConnection();
            String sql = "SELECT product_name FROM products WHERE product_name LIKE ?";
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, text + "%");
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                suggestions.add(rs.getString("product_name"));
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return suggestions;
    }

    // Method to calculate profit and percentage profit
    private void calculateProfit() {
        try {
            // Parse integer values from the text fields
            int bPrice = Integer.parseInt(txt_product_B_Price.getText());
            int sPrice = Integer.parseInt(txt_product_S_Price.getText());

            // Calculate profit
            profit = sPrice - bPrice;

            // Calculate percentage profit
            perc_profit = ((double) profit / bPrice) * 100;

        } catch (NumberFormatException e) {
            // Handle invalid input
            profit = 0;
            perc_profit = 0.0;
            JOptionPane.showMessageDialog(null, "Invalid input. Please ensure all values are numeric.");
        }
    }

    //to add products to the database in products table
    public boolean addProduct() {

        boolean isAdded = false;

        productName = txt_productName.getText();
        product_B_Price = txt_product_B_Price.getText();
        product_S_Price = txt_product_S_Price.getText();
        perc_comm = txt_commission.getText();
//
        // Convert prices to integers
        int bPrice = Integer.parseInt(product_B_Price);
        int sPrice = Integer.parseInt(product_S_Price);
        int commission = Integer.parseInt(perc_comm);

        try {

            Connection con = DBConnection.getConnection();
            String sql = "insert into products (product_name, b_price, s_price, profit, perc_profit, perc_commission) VALUES (?, ?, ?, ?, ?, ?)";
            PreparedStatement pst = con.prepareStatement(sql);

            //sets the values from the textfield to the colums in the db
            pst.setString(1, productName);
            pst.setInt(2, bPrice);
            pst.setInt(3, sPrice);
            pst.setInt(4, profit);
            pst.setDouble(5, perc_profit);
            pst.setInt(6, commission);

            //If a database row is added to output a success message
            int rowCount = pst.executeUpdate();

            if (rowCount > 0) {
                isAdded = true;
            } else {
                isAdded = false;
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
            e.printStackTrace();
        }
        //returns the 'isAdded' variable value
        return isAdded;

    }

//    private void addProduct() {
//        String productName = txt_productName.getText().trim();
//        String productBPrice = txt_product_B_Price.getText().trim();
//        String productSPrice = txt_product_S_Price.getText().trim();
//
//        // Validate inputs
//        if (productName.isEmpty() || productBPrice.isEmpty() || productSPrice.isEmpty()) {
//            lblMessage.setText("Please fill all fields.");
//            return;
//        }
//
//        if (!productBPrice.matches("\\d+") || !productSPrice.matches("\\d+")) {
//            lblMessage.setText("Prices must be numeric.");
//            return;
//        }
//
//        // Convert prices to integers
//        int bPrice = Integer.parseInt(productBPrice);
//        int sPrice = Integer.parseInt(productSPrice);
//
//        // Insert product into the database
//        Connection con = DBConnection.getConnection();
//        if (con == null) {
//            lblMessage.setText("Database connection failed.");
//            return;
//        }
//
//        String sql = "INSERT INTO products (product_name, b_price, s_price) VALUES (?, ?, ?)";
//
//        try (PreparedStatement pst = con.prepareStatement(sql)) {
//            pst.setString(1, productName);
//            pst.setInt(2, bPrice);
//            pst.setInt(3, sPrice);
//
//            int rowCount = pst.executeUpdate();
//            if (rowCount > 0) {
//                lblMessage.setText("Product added successfully!");
//                clearComponents();
//            } else {
//                lblMessage.setText("Failed to add product.");
//            }
//        } catch (Exception e) {
//            lblMessage.setText("Error: " + e.getMessage());
//            e.printStackTrace();
//        }
//    }
    //method to Update the product details
    public boolean updateProduct() {

        boolean isUpdated = false;

        productName = txt_productName.getText();
        product_B_Price = txt_product_B_Price.getText();
        product_S_Price = txt_product_S_Price.getText();
        perc_comm = txt_commission.getText();

        try {
            // Parse prices to integers
            int bPrice = Integer.parseInt(product_B_Price);
            int sPrice = Integer.parseInt(product_S_Price);
            int commission = Integer.parseInt(perc_comm);

            // Calculate profit and percentage profit
            profit = sPrice - bPrice;
            perc_profit = ((double) profit / bPrice) * 100;

            // Update database
            Connection con = DBConnection.getConnection();
            String sql = "update products set product_name = ?, b_price = ?, s_price = ?, profit = ?, perc_profit = ?, perc_commission = ? where product_name = ?";
            PreparedStatement pst = con.prepareStatement(sql);

            //sets the values from the textfield to the colums in the db
            pst.setString(1, productName);
            pst.setInt(2, bPrice);
            pst.setInt(3, sPrice);
            pst.setInt(4, profit);
            pst.setDouble(5, perc_profit);
            pst.setInt(6, commission);
            pst.setString(7, productName);

            //If a database row is added to output a success message
            int rowCount = pst.executeUpdate();

            if (rowCount > 0) {
                isUpdated = true;
            } else {
                isUpdated = false;
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        //returns the 'isAdded' variable value
        return isUpdated;

    }

    //method to delete products details
    public boolean deleteProduct() {

        boolean isDeleted = false;

//        studentId = Integer.parseInt(txt_studentId.getText());
        productName = txt_productName.getText();

        try {
            Connection con = DBConnection.getConnection();
            String sql = "delete from products where product_name = ?";
            PreparedStatement pst = con.prepareStatement(sql);

            //sets the values from the textfield to the colums in the db
            pst.setString(1, productName);

            //If a database row is added to output a success message
            int rowCount = pst.executeUpdate();

            if (rowCount > 0) {
                isDeleted = true;
            } else {
                isDeleted = false;
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        //returns the 'isAdded' variable value
        return isDeleted;
    }

    private void clearComponents() {
        txt_productName.setText("");
        txt_product_B_Price.setText("");
        txt_product_S_Price.setText("");
        txt_commission.setText("");
    }

    private void lbl_backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_backMouseClicked
        this.dispose();
    }//GEN-LAST:event_lbl_backMouseClicked

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed

        if (txt_productName.getText().isEmpty() || txt_product_B_Price.getText().isEmpty() || txt_product_S_Price.getText().isEmpty() || txt_commission.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please fill all the fields");

        } else if (addProduct() == true) {
            JOptionPane.showMessageDialog(this, "Product Added Successfully...");

            clearComponents();
            txt_productName.requestFocusInWindow();
        } else {
            JOptionPane.showMessageDialog(this, "Product Addition failed, Please check your Database Connection...");
            txt_productName.requestFocusInWindow();
        }
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        //updateProduct()
        if (txt_productName.getText().isEmpty() || txt_product_B_Price.getText().isEmpty() || txt_product_S_Price.getText().isEmpty() || txt_commission.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please fill all the fields");

        } else if (updateProduct() == true) {
            JOptionPane.showMessageDialog(this, "Product Updated Successfully...");

            clearComponents();
            txt_productName.requestFocusInWindow();
        } else {
            JOptionPane.showMessageDialog(this, "Product Update failed, Please check your Database Connection...");
            txt_productName.requestFocusInWindow();
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txt_product_B_PriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_product_B_PriceKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_product_B_PriceKeyTyped

    private void txt_productNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_productNameKeyReleased
        String text = txt_productName.getText();
        if (!text.isEmpty()) {
            showSuggestions(text);
            txt_productName.requestFocusInWindow();
        } else {
            suggestionMenu.setVisible(false);
            txt_productName.requestFocusInWindow();
        }
    }//GEN-LAST:event_txt_productNameKeyReleased

    private void btnDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActionPerformed
        if (txt_productName.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter the name of the product you want to delete");

        } else if (deleteProduct() == true) {
            JOptionPane.showMessageDialog(this, "Product Deleted Successfully...");

            clearComponents();
            txt_productName.requestFocusInWindow();
        } else {
            JOptionPane.showMessageDialog(this, "Product Delete failed, Please check your Database Connection...");
            txt_productName.requestFocusInWindow();
        }
    }//GEN-LAST:event_btnDelActionPerformed

    private void txt_product_S_PriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_product_S_PriceKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_product_S_PriceKeyTyped

    private void btnSubmitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSubmitMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSubmitMouseClicked

    private void txt_product_S_PriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_product_S_PriceKeyReleased
        calculateProfit();
    }//GEN-LAST:event_txt_product_S_PriceKeyReleased

    private void txt_commissionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_commissionKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_commissionKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MiniFrame_addProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MiniFrame_addProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MiniFrame_addProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MiniFrame_addProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MiniFrame_addProduct().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDel;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lbl_back;
    private rojerusan.RSMetroTextPlaceHolder txt_commission;
    private javax.swing.JTextField txt_productName;
    private javax.swing.JTextField txt_product_B_Price;
    private javax.swing.JTextField txt_product_S_Price;
    // End of variables declaration//GEN-END:variables
}
